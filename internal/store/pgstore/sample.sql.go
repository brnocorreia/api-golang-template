// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sample.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSample = `-- name: CreateSample :one
INSERT INTO "sample" ("name", "password", "created_at") VALUES ($1, $2, $3) RETURNING id, name, password, created_at
`

type CreateSampleParams struct {
	Name      string
	Password  string
	CreatedAt time.Time
}

func (q *Queries) CreateSample(ctx context.Context, arg CreateSampleParams) (Sample, error) {
	row := q.db.QueryRow(ctx, createSample, arg.Name, arg.Password, arg.CreatedAt)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSample = `-- name: DeleteSample :exec
DELETE FROM "sample" WHERE "id" = $1
`

func (q *Queries) DeleteSample(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSample, id)
	return err
}

const getAllSamples = `-- name: GetAllSamples :many
SELECT id, name, password, created_at FROM "sample" ORDER BY "created_at" DESC
`

func (q *Queries) GetAllSamples(ctx context.Context) ([]Sample, error) {
	rows, err := q.db.Query(ctx, getAllSamples)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sample
	for rows.Next() {
		var i Sample
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSampleByID = `-- name: GetSampleByID :one
SELECT id, name, password, created_at FROM "sample" WHERE "id" = $1
`

func (q *Queries) GetSampleByID(ctx context.Context, id uuid.UUID) (Sample, error) {
	row := q.db.QueryRow(ctx, getSampleByID, id)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateSample = `-- name: UpdateSample :one
UPDATE "sample" SET "name" = $1, "password" = $2, "created_at" = $3 WHERE "id" = $4 RETURNING id, name, password, created_at
`

type UpdateSampleParams struct {
	Name      string
	Password  string
	CreatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateSample(ctx context.Context, arg UpdateSampleParams) (Sample, error) {
	row := q.db.QueryRow(ctx, updateSample,
		arg.Name,
		arg.Password,
		arg.CreatedAt,
		arg.ID,
	)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
